{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kkmjm\\\\React\\\\section_13\\\\src\\\\components\\\\Users.js\";\nimport { Component, useState } from \"react\";\nimport User from \"./User\";\nimport classes from \"./Users.module.css\";\n\n// const DUMMY_USERS = [\n//   { id: \"u1\", name: \"Max\" },\n//   { id: \"u2\", name: \"Manuel\" },\n//   { id: \"u3\", name: \"Julie\" },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Users extends Component {\n  constructor() {\n    super(); // 상위 클래스의 생성자를 호출\n    this.state = {\n      showUsers: true\n      // moreState: 'Test',\n      // nested: {},\n      // data: []\n    };\n  }\n\n  toggleUsersHandler() {\n    this.setState(curState => {\n      return {\n        showUsers: !curState.showUsers\n      }; // Component를 상속받은 모든 클래스에서 사용 가능. 항상 객체를 사용. 오버라이드하지 않고 기존 상태와 병합함. 기존 상태와 결합된 것이기 때문에 다른 상태값은 손실되지 않음\n    });\n  }\n\n  render() {\n    const usersList = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.props.users.map(user => /*#__PURE__*/_jsxDEV(User, {\n        name: user.name\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.users,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.toggleUsersHandler.bind(this),\n        children: [\" \", this.state.showUsers ? \"Hide\" : \"Show\", \" Users\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), this.state.showUsers && usersList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n/*\nconst Users = () => {\n  const [showUsers, setShowUsers] = useState(true);\n\n  const toggleUsersHandler = () => {\n    setShowUsers((curState) => !curState);\n  };\n\n  const usersList = (\n    <ul>\n      {DUMMY_USERS.map((user) => (\n        <User key={user.id} name={user.name} />\n      ))}\n    </ul>\n  );\n\n  return (\n    <div className={classes.users}>\n      <button onClick={toggleUsersHandler}>\n        {showUsers ? 'Hide' : 'Show'} Users\n      </button>\n      {showUsers && usersList}\n    </div>\n  );\n};\n*/\nexport default Users;","map":{"version":3,"names":["Component","useState","User","classes","jsxDEV","_jsxDEV","Users","constructor","state","showUsers","toggleUsersHandler","setState","curState","render","usersList","children","props","users","map","user","name","id","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","bind"],"sources":["C:/Users/kkmjm/React/section_13/src/components/Users.js"],"sourcesContent":["import { Component, useState } from \"react\";\nimport User from \"./User\";\n\nimport classes from \"./Users.module.css\";\n\n// const DUMMY_USERS = [\n//   { id: \"u1\", name: \"Max\" },\n//   { id: \"u2\", name: \"Manuel\" },\n//   { id: \"u3\", name: \"Julie\" },\n// ];\n\nclass Users extends Component {\n  constructor() {\n    super(); // 상위 클래스의 생성자를 호출\n    this.state = {\n      showUsers: true,\n      // moreState: 'Test',\n      // nested: {},\n      // data: []\n    };\n  }\n\n  toggleUsersHandler() {\n    this.setState((curState) => {\n      return { showUsers: !curState.showUsers }; // Component를 상속받은 모든 클래스에서 사용 가능. 항상 객체를 사용. 오버라이드하지 않고 기존 상태와 병합함. 기존 상태와 결합된 것이기 때문에 다른 상태값은 손실되지 않음\n    });\n  }\n\n  render() {\n    const usersList = (\n      <ul>\n        {this.props.users.map((user) => (\n          <User key={user.id} name={user.name} />\n        ))}\n      </ul>\n    );\n\n    return (\n      <div className={classes.users}>\n        <button onClick={this.toggleUsersHandler.bind(this)}>\n          {\" \"}\n          {/* this 예약어가 코드가 평가될 시점의 동일 값이나 동일 내용을 갖도록 설정됨 */}\n          {this.state.showUsers ? \"Hide\" : \"Show\"} Users\n        </button>\n        {this.state.showUsers && usersList}\n      </div>\n    );\n  }\n}\n\n/*\nconst Users = () => {\n  const [showUsers, setShowUsers] = useState(true);\n\n  const toggleUsersHandler = () => {\n    setShowUsers((curState) => !curState);\n  };\n\n  const usersList = (\n    <ul>\n      {DUMMY_USERS.map((user) => (\n        <User key={user.id} name={user.name} />\n      ))}\n    </ul>\n  );\n\n  return (\n    <div className={classes.users}>\n      <button onClick={toggleUsersHandler}>\n        {showUsers ? 'Hide' : 'Show'} Users\n      </button>\n      {showUsers && usersList}\n    </div>\n  );\n};\n*/\nexport default Users;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,QAAQ;AAEzB,OAAOC,OAAO,MAAM,oBAAoB;;AAExC;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,KAAK,SAASN,SAAS,CAAC;EAC5BO,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC,CAAC,CAAC;IACT,IAAI,CAACC,KAAK,GAAG;MACXC,SAAS,EAAE;MACX;MACA;MACA;IACF,CAAC;EACH;;EAEAC,kBAAkBA,CAAA,EAAG;IACnB,IAAI,CAACC,QAAQ,CAAEC,QAAQ,IAAK;MAC1B,OAAO;QAAEH,SAAS,EAAE,CAACG,QAAQ,CAACH;MAAU,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC;EACJ;;EAEAI,MAAMA,CAAA,EAAG;IACP,MAAMC,SAAS,gBACbT,OAAA;MAAAU,QAAA,EACG,IAAI,CAACC,KAAK,CAACC,KAAK,CAACC,GAAG,CAAEC,IAAI,iBACzBd,OAAA,CAACH,IAAI;QAAekB,IAAI,EAAED,IAAI,CAACC;MAAK,GAAzBD,IAAI,CAACE,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoB,CACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;IAED,oBACEpB,OAAA;MAAKqB,SAAS,EAAEvB,OAAO,CAACc,KAAM;MAAAF,QAAA,gBAC5BV,OAAA;QAAQsB,OAAO,EAAE,IAAI,CAACjB,kBAAkB,CAACkB,IAAI,CAAC,IAAI,CAAE;QAAAb,QAAA,GACjD,GAAG,EAEH,IAAI,CAACP,KAAK,CAACC,SAAS,GAAG,MAAM,GAAG,MAAM,EAAC,QAC1C;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACR,IAAI,CAACjB,KAAK,CAACC,SAAS,IAAIK,SAAS;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAenB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}